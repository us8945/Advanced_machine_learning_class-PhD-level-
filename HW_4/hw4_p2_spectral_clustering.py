'''
Created on Oct 5, 2016

@author: uri
Implement Spectracl clustering algorithm
'''
import numpy as np
import math
from sklearn.cluster import KMeans
import matplotlib.pyplot as plt
import scipy.misc #make sure pillow is installed as PIL is used by scipy imread

def compute_laplacian(A,k):
    ''' 
    Problem 2-1
    A - matrix of similarities
    k - number of "k" eigen-vectors corresponding to "k" smallest eigen-values
    Given matrix A:
        1) Compute Laplacian matrix L = D - A
        2) Compute eigen-vectors of L
        3) Constract matrix V with eigen-vectors (as columns) of V corresponding to "k" smallest eigen-values
        4) Run k-mean(k) on the V
        5) Return final clusters  
    '''
    D=np.zeros(len(A)**2).reshape(len(A),len(A))
    for i in range(len(D)):
        D[i][i]=np.sum(A[i,:])
    
    L=D-A #Laplacian matrix
    eig_val,eig_vec = np.linalg.eig(L)
    eig_pairs = [(np.abs(eig_val[i]), eig_vec[:,i]) for i in range(len(eig_val))]
    eig_pairs.sort(key=lambda x: x[0], reverse=False)
    V=eig_pairs[0][1].reshape(len(eig_pairs),1)
    for i in range(1,k):
        V = np.hstack((V, eig_pairs[i][1].reshape(len(eig_pairs),1)))
    
    kmeans = KMeans(n_clusters=k, random_state=0).fit(V)
    return kmeans.labels_

def calculate_similarities_matrix(X,sigma):
    A=np.zeros(len(X)**2).reshape(len(X),len(X))
    for i in range(len(X)):
        for j in range(len(X)):
            distance=np.linalg.norm(X[i]-X[j])
            A[i][j]=np.exp((-1)*(distance**2)/(2*sigma**2))
    
    return A 

def calculate_similarities_img_matrix(X,sigma):
    A=np.zeros(len(X)**2).reshape(len(X),len(X))
    for i in range(len(X)):
        for j in range(len(X)):
            distance=abs(X[i][2]-X[j][2])
            A[i][j]=math.exp((-1)*(distance**2)/(2*sigma**2))
    
    return A 

def process_image_to_matrix(img):
    h_col,w_col = img.shape
    img_matrix=[]
    for h in range(h_col):
        for w in range(w_col):    
            img_matrix.append([h_col-h,w,img[h][w]])
    return np.array(img_matrix)
        

if __name__ == '__main__':
    ''' Problem 2-2 
        Use Spectral and K-means clustering to separate data produced by circs.m MATLAB function (given in HW). The data generated by circs.m
        was saved into circs.csv file and placed to data folder.
    '''
    circs = np.genfromtxt('data/circs.csv',delimiter=',').T #load points generated by circs.m Matlab function 
    sigma=0.1
    A=calculate_similarities_matrix(circs,sigma)
    laplacian_labels=compute_laplacian(A,2)
    kmeans = KMeans(n_clusters=2, random_state=0).fit(circs)
    kmean_labels=kmeans.labels_
    y=circs[:,1]
    x=circs[:,0]
    plt.title('Spectral clustering with sigma'+str(sigma))
    plt.scatter(x,y, c=laplacian_labels, alpha=0.5,cmap=plt.cm.cool)
    file_name='HW4_p2_Spectral_clustering_'+str(sigma)+'.png'
    plt.savefig(file_name)
    #plt.show()
    
    plt.title('K-means clustering')
    plt.scatter(x,y, c=kmean_labels, alpha=0.5,cmap=plt.cm.cool)
    file_name='HW4_p2_Kmeans_clustering.png'
    plt.savefig(file_name)
    #plt.show()
    

    '''
    Problem 2-3
    '''
    img = scipy.misc.imread('data/bw.jpg')
    img_matrix=process_image_to_matrix(img)

    sigma=[0.5,0.7,1,1.2,1.5,1.7,2,2.2,2.5,2.7,3,3.3,3.7,4,4.3,4.5,4.7,5]
    for s in sigma:
        A=calculate_similarities_img_matrix(img_matrix,s)
        print("Before Laplacian labels")
        laplacian_labels=compute_laplacian(A,2)
        x=img_matrix[:,1]
        y=img_matrix[:,0]
        plt.title('Spectral clustering with sigma:'+str(s))
        plt.scatter(x,y, c=laplacian_labels, alpha=0.5,cmap=plt.cm.cool)
        file_name='spectral_clustering_'+str(s)+'.png'
        plt.savefig(file_name)
        #plt.show()

    x=img_matrix[:,1]
    y=img_matrix[:,0]
    kmeans = KMeans(n_clusters=2, random_state=0).fit(img_matrix)
    kmean_labels=kmeans.labels_
    plt.title('K-means clustering')
    plt.scatter(x,y, c=kmean_labels, alpha=0.5,cmap=plt.cm.cool)
    file_name='complex_set_kmeans_clustering.png'
    plt.savefig(file_name)
    #plt.show()
    
    